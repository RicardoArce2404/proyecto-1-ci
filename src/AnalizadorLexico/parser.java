
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\007\000\002\011\010\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\006\000\002\014" +
    "\004\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\005\000\002\017\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\003\000\002\025\004\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\005\000" +
    "\002\027\003\000\002\030\004\000\002\030\004\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\005" +
    "\000\002\005\004\000\002\005\002\000\002\006\013\000" +
    "\002\007\003\000\002\007\005\000\002\007\002\000\002" +
    "\010\004\000\002\010\004\000\002\032\004\000\002\032" +
    "\002\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\042\007\000\002" +
    "\043\007\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\036\006\000\002\036\006\000\002\036\005" +
    "\000\002\037\005\000\002\037\005\000\002\040\006\000" +
    "\002\041\003\000\002\041\005\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\046\011\000\002\047" +
    "\003\000\002\047\004\000\002\050\011\000\002\051\007" +
    "\000\002\051\002\000\002\052\015\000\002\053\014\000" +
    "\002\053\014\000\002\054\004\000\002\054\003\000\002" +
    "\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\020\004\005\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\001\002\000\004\002\325\001\002" +
    "\000\014\005\020\006\017\007\014\010\016\011\012\001" +
    "\002\000\016\005\020\006\017\007\014\010\016\011\012" +
    "\012\uffc6\001\002\000\020\004\005\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\001\002\000\016\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\001\002\000" +
    "\016\005\020\006\017\007\014\010\016\011\012\012\uffc6" +
    "\001\002\000\004\035\ufff4\001\002\000\004\035\275\001" +
    "\002\000\004\035\ufff6\001\002\000\004\012\022\001\002" +
    "\000\004\035\ufff5\001\002\000\004\035\ufff7\001\002\000" +
    "\004\035\ufff8\001\002\000\004\002\000\001\002\000\004" +
    "\013\023\001\002\000\004\045\024\001\002\000\024\004" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\025\uffbe\030\uffbe" +
    "\035\uffbe\046\uffbe\001\002\000\024\004\045\014\027\015" +
    "\053\016\035\021\036\025\033\030\052\035\041\046\051" +
    "\001\002\000\024\004\uffb6\014\uffb6\015\uffb6\016\uffb6\021" +
    "\uffb6\025\uffb6\030\uffb6\035\uffb6\046\uffb6\001\002\000\004" +
    "\043\271\001\002\000\024\004\uffba\014\uffba\015\uffba\016" +
    "\uffba\021\uffba\025\uffba\030\uffba\035\uffba\046\uffba\001\002" +
    "\000\024\004\uffbf\014\uffbf\015\uffbf\016\uffbf\021\uffbf\025" +
    "\uffbf\030\uffbf\035\uffbf\046\uffbf\001\002\000\024\004\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\021\uffb7\025\uffb7\030\uffb7\035" +
    "\uffb7\046\uffb7\001\002\000\004\045\257\001\002\000\024" +
    "\004\uffa8\014\uffa8\015\uffa8\016\uffa8\021\uffa8\025\uffa8\030" +
    "\uffa8\035\uffa8\046\uffa8\001\002\000\026\017\077\020\107" +
    "\035\103\036\111\037\115\040\120\041\071\043\102\054" +
    "\110\075\074\001\002\000\004\022\231\001\002\000\024" +
    "\004\uffb9\014\uffb9\015\uffb9\016\uffb9\021\uffb9\025\uffb9\030" +
    "\uffb9\035\uffb9\046\uffb9\001\002\000\024\004\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\021\uffb8\025\uffb8\030\uffb8\035\uffb8\046" +
    "\uffb8\001\002\000\010\043\164\047\165\064\215\001\002" +
    "\000\024\004\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd\025" +
    "\uffbd\030\uffbd\035\uffbd\046\uffbd\001\002\000\024\004\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\021\uffbc\025\uffbc\030\uffbc\035" +
    "\uffbc\046\uffbc\001\002\000\024\004\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\021\uffa6\025\uffa6\030\uffa6\035\uffa6\046\uffa6\001" +
    "\002\000\014\005\020\006\017\007\014\010\016\011\012" +
    "\001\002\000\024\004\uffa7\014\uffa7\015\uffa7\016\uffa7\021" +
    "\uffa7\025\uffa7\030\uffa7\035\uffa7\046\uffa7\001\002\000\004" +
    "\064\215\001\002\000\024\004\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\021\uffbb\025\uffbb\030\uffbb\035\uffbb\046\uffbb\001\002" +
    "\000\004\042\220\001\002\000\004\035\063\001\002\000" +
    "\004\043\054\001\002\000\010\036\060\037\055\041\056" +
    "\001\002\000\004\044\uffb2\001\002\000\004\044\uffb1\001" +
    "\002\000\004\044\061\001\002\000\004\044\uffb3\001\002" +
    "\000\004\042\062\001\002\000\024\004\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\021\uffb4\025\uffb4\030\uffb4\035\uffb4\046\uffb4" +
    "\001\002\000\006\047\165\064\215\001\002\000\004\031" +
    "\065\001\002\000\004\036\066\001\002\000\006\032\067" +
    "\033\070\001\002\000\026\017\077\020\107\035\103\036" +
    "\111\037\115\040\120\041\071\043\102\054\110\075\074" +
    "\001\002\000\026\017\077\020\107\035\103\036\111\037" +
    "\115\040\120\041\071\043\102\054\110\075\074\001\002" +
    "\000\026\034\uffe0\042\uffe0\044\uffe0\065\uffe0\066\uffe0\070" +
    "\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\001\002\000\014" +
    "\034\uffed\042\uffed\044\uffed\073\uffed\074\uffed\001\002\000" +
    "\004\034\201\001\002\000\004\035\200\001\002\000\050" +
    "\034\uffca\042\uffca\044\uffca\051\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\065\uffca\066\uffca" +
    "\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\001" +
    "\002\000\044\034\uffd5\042\uffd5\044\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\001\002" +
    "\000\026\034\uffe3\042\uffe3\044\uffe3\065\uffe3\066\uffe3\070" +
    "\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\001\002\000\026" +
    "\034\uffe4\042\uffe4\044\uffe4\065\uffe4\066\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\001\002\000\044\034\uffd7" +
    "\042\uffd7\044\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\001\002\000\026\017\077\020" +
    "\107\035\103\036\111\037\115\040\120\041\071\043\102" +
    "\054\110\075\074\001\002\000\056\034\uffcb\042\uffcb\043" +
    "\164\044\uffcb\047\165\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\162\063\163\065\uffcb\066" +
    "\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\001\002\000\012\034\ufff1\042\ufff1\044\ufff1\074\160\001" +
    "\002\000\046\034\uffd1\042\uffd1\044\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\156\065\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\001\002\000\046\034\uffce\042\uffce\044\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\065\uffce" +
    "\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074" +
    "\uffce\001\002\000\026\034\uffe2\042\uffe2\044\uffe2\065\uffe2" +
    "\066\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\001" +
    "\002\000\006\036\154\037\153\001\002\000\050\034\uffcd" +
    "\042\uffcd\044\uffcd\051\uffcd\053\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\057\uffcd\060\uffcd\061\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\001\002\000" +
    "\014\034\uffef\042\uffef\044\uffef\073\151\074\uffef\001\002" +
    "\000\034\034\uffe5\042\uffe5\044\uffe5\053\130\054\131\065" +
    "\uffe5\066\uffe5\067\147\070\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\001\002\000\050\034\uffc9\042\uffc9\044\uffc9\051" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072" +
    "\uffc9\073\uffc9\074\uffc9\001\002\000\050\034\uffcc\042\uffcc" +
    "\044\uffcc\051\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\072\uffcc\073\uffcc\074\uffcc\001\002\000\044\034" +
    "\uffdc\042\uffdc\044\uffdc\053\uffdc\054\uffdc\055\135\056\136" +
    "\057\134\060\133\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\073\uffdc\074\uffdc\001\002\000\026\034\uffea" +
    "\042\uffea\044\uffea\065\122\066\125\070\124\071\121\072" +
    "\123\073\uffea\074\uffea\001\002\000\026\034\uffe1\042\uffe1" +
    "\044\uffe1\065\uffe1\066\uffe1\070\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\001\002\000\014\035\103\036\111\037\115" +
    "\043\102\054\110\001\002\000\026\017\077\020\107\035" +
    "\103\036\111\037\115\040\120\041\071\043\102\054\110" +
    "\075\074\001\002\000\014\035\103\036\111\037\115\043" +
    "\102\054\110\001\002\000\014\035\103\036\111\037\115" +
    "\043\102\054\110\001\002\000\026\017\077\020\107\035" +
    "\103\036\111\037\115\040\120\041\071\043\102\054\110" +
    "\075\074\001\002\000\022\034\uffeb\042\uffeb\044\uffeb\070" +
    "\124\071\121\072\123\073\uffeb\074\uffeb\001\002\000\032" +
    "\034\uffe8\042\uffe8\044\uffe8\053\130\054\131\065\uffe8\066" +
    "\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\001\002" +
    "\000\014\035\103\036\111\037\115\043\102\054\110\001" +
    "\002\000\014\035\103\036\111\037\115\043\102\054\110" +
    "\001\002\000\044\034\uffdd\042\uffdd\044\uffdd\053\uffdd\054" +
    "\uffdd\055\135\056\136\057\134\060\133\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\001" +
    "\002\000\014\035\103\036\111\037\115\043\102\054\110" +
    "\001\002\000\014\035\103\036\111\037\115\043\102\054" +
    "\110\001\002\000\014\035\103\036\111\037\115\043\102" +
    "\054\110\001\002\000\014\035\103\036\111\037\115\043" +
    "\102\054\110\001\002\000\044\034\uffda\042\uffda\044\uffda" +
    "\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\065" +
    "\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\001\002\000\044\034\uffdb\042\uffdb\044\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\001\002\000\044\034\uffd9\042\uffd9\044\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\065\uffd9\066" +
    "\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\001\002\000\044\034\uffd8\042\uffd8\044\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\065\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\001" +
    "\002\000\044\034\uffde\042\uffde\044\uffde\053\uffde\054\uffde" +
    "\055\135\056\136\057\134\060\133\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\001\002" +
    "\000\032\034\uffe6\042\uffe6\044\uffe6\053\130\054\131\065" +
    "\uffe6\066\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6" +
    "\001\002\000\022\034\uffec\042\uffec\044\uffec\070\124\071" +
    "\121\072\123\073\uffec\074\uffec\001\002\000\032\034\uffe7" +
    "\042\uffe7\044\uffe7\053\130\054\131\065\uffe7\066\uffe7\070" +
    "\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\001\002\000\014" +
    "\035\103\036\111\037\115\043\102\054\110\001\002\000" +
    "\032\034\uffe9\042\uffe9\044\uffe9\053\130\054\131\065\uffe9" +
    "\066\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\001" +
    "\002\000\026\017\077\020\107\035\103\036\111\037\115" +
    "\040\120\041\071\043\102\054\110\075\074\001\002\000" +
    "\014\034\uffee\042\uffee\044\uffee\073\uffee\074\uffee\001\002" +
    "\000\044\034\uffd3\042\uffd3\044\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\001\002\000" +
    "\044\034\uffd4\042\uffd4\044\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\065\uffd4\066\uffd4\067\uffd4\070" +
    "\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\001\002\000\044" +
    "\034\uffd6\042\uffd6\044\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6" +
    "\071\uffd6\072\uffd6\073\uffd6\074\uffd6\001\002\000\012\035" +
    "\103\036\111\037\115\043\102\001\002\000\044\034\uffd2" +
    "\042\uffd2\044\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\001\002\000\026\017\077\020" +
    "\107\035\103\036\111\037\115\040\120\041\071\043\102" +
    "\054\110\075\074\001\002\000\014\034\ufff0\042\ufff0\044" +
    "\ufff0\073\151\074\ufff0\001\002\000\046\034\uffd0\042\uffd0" +
    "\044\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\001\002\000\046\034\uffcf\042" +
    "\uffcf\044\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\060\uffcf\061\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071" +
    "\uffcf\072\uffcf\073\uffcf\074\uffcf\001\002\000\012\035\170" +
    "\036\111\037\115\043\102\001\002\000\004\036\166\001" +
    "\002\000\004\050\167\001\002\000\052\034\ufff3\042\ufff3" +
    "\044\ufff3\051\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\061\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\001\002\000" +
    "\012\043\164\044\uffcb\047\165\051\uffcb\001\002\000\004" +
    "\044\175\001\002\000\006\044\uffaa\051\173\001\002\000" +
    "\012\035\170\036\111\037\115\043\102\001\002\000\004" +
    "\044\uffa9\001\002\000\072\004\uffab\014\uffab\015\uffab\016" +
    "\uffab\021\uffab\025\uffab\030\uffab\034\uffab\035\uffab\042\uffab" +
    "\044\uffab\046\uffab\051\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\065\uffab\066\uffab\067\uffab" +
    "\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\001\002\000" +
    "\004\044\177\001\002\000\050\034\uffc8\042\uffc8\044\uffc8" +
    "\051\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\001\002\000\026\034\uffdf\042" +
    "\uffdf\044\uffdf\065\uffdf\066\uffdf\070\uffdf\071\uffdf\072\uffdf" +
    "\073\uffdf\074\uffdf\001\002\000\004\045\202\001\002\000" +
    "\022\004\045\014\027\015\053\016\035\021\036\025\033" +
    "\030\052\035\041\001\002\000\024\004\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\021\uff9b\025\uff9b\030\uff9b\035\uff9b\046\uff9b" +
    "\001\002\000\024\004\045\014\027\015\053\016\035\021" +
    "\036\025\033\030\052\035\041\046\206\001\002\000\024" +
    "\004\uff9c\014\uff9c\015\uff9c\016\uff9c\021\uff9c\025\uff9c\030" +
    "\uff9c\035\uff9c\046\uff9c\001\002\000\024\004\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\021\uff9d\025\uff9d\030\uff9d\035\uff9d\046" +
    "\uff9d\001\002\000\004\034\210\001\002\000\004\045\211" +
    "\001\002\000\022\004\045\014\027\015\053\016\035\021" +
    "\036\025\033\030\052\035\041\001\002\000\024\004\045" +
    "\014\027\015\053\016\035\021\036\025\033\030\052\035" +
    "\041\046\213\001\002\000\024\004\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\021\uff9e\025\uff9e\030\uff9e\035\uff9e\046\uff9e\001" +
    "\002\000\004\042\217\001\002\000\026\017\077\020\107" +
    "\035\103\036\111\037\115\040\120\041\071\043\102\054" +
    "\110\075\074\001\002\000\004\042\ufff2\001\002\000\026" +
    "\004\uffad\014\uffad\015\uffad\016\uffad\021\uffad\025\uffad\030" +
    "\uffad\031\uffad\035\uffad\046\uffad\001\002\000\004\002\ufff9" +
    "\001\002\000\004\042\222\001\002\000\026\004\uffac\014" +
    "\uffac\015\uffac\016\uffac\021\uffac\025\uffac\030\uffac\031\uffac" +
    "\035\uffac\046\uffac\001\002\000\004\035\224\001\002\000" +
    "\010\042\230\047\165\064\215\001\002\000\006\042\227" +
    "\064\215\001\002\000\024\004\uffae\014\uffae\015\uffae\016" +
    "\uffae\021\uffae\025\uffae\030\uffae\035\uffae\046\uffae\001\002" +
    "\000\024\004\uffaf\014\uffaf\015\uffaf\016\uffaf\021\uffaf\025" +
    "\uffaf\030\uffaf\035\uffaf\046\uffaf\001\002\000\024\004\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\021\uffb0\025\uffb0\030\uffb0\035" +
    "\uffb0\046\uffb0\001\002\000\004\043\233\001\002\000\006" +
    "\023\245\024\uffa0\001\002\000\026\017\077\020\107\035" +
    "\103\036\111\037\115\040\120\041\071\043\102\054\110" +
    "\075\074\001\002\000\010\023\uffa4\024\uffa4\043\233\001" +
    "\002\000\006\023\uffa3\024\uffa3\001\002\000\004\044\237" +
    "\001\002\000\004\052\240\001\002\000\004\045\241\001" +
    "\002\000\022\004\045\014\027\015\053\016\035\021\036" +
    "\025\033\030\052\035\041\001\002\000\024\004\045\014" +
    "\027\015\053\016\035\021\036\025\033\030\052\035\041" +
    "\046\243\001\002\000\010\023\uffa2\024\uffa2\043\uffa2\001" +
    "\002\000\004\024\252\001\002\000\004\052\246\001\002" +
    "\000\004\045\247\001\002\000\022\004\045\014\027\015" +
    "\053\016\035\021\036\025\033\030\052\035\041\001\002" +
    "\000\024\004\045\014\027\015\053\016\035\021\036\025" +
    "\033\030\052\035\041\046\251\001\002\000\004\024\uffa1" +
    "\001\002\000\004\021\253\001\002\000\004\042\254\001" +
    "\002\000\024\004\uffa5\014\uffa5\015\uffa5\016\uffa5\021\uffa5" +
    "\025\uffa5\030\uffa5\035\uffa5\046\uffa5\001\002\000\004\042" +
    "\256\001\002\000\024\004\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\021\uff9a\025\uff9a\030\uff9a\035\uff9a\046\uff9a\001\002\000" +
    "\022\004\045\014\027\015\053\016\035\021\036\025\033" +
    "\030\052\035\041\001\002\000\024\004\045\014\027\015" +
    "\053\016\035\021\036\025\033\030\052\035\041\046\261" +
    "\001\002\000\004\026\262\001\002\000\004\027\263\001" +
    "\002\000\026\017\077\020\107\035\103\036\111\037\115" +
    "\040\120\041\071\043\102\054\110\075\074\001\002\000" +
    "\004\042\265\001\002\000\004\024\266\001\002\000\004" +
    "\025\267\001\002\000\004\042\270\001\002\000\024\004" +
    "\uff9f\014\uff9f\015\uff9f\016\uff9f\021\uff9f\025\uff9f\030\uff9f" +
    "\035\uff9f\046\uff9f\001\002\000\004\035\272\001\002\000" +
    "\004\044\273\001\002\000\004\042\274\001\002\000\024" +
    "\004\uffb5\014\uffb5\015\uffb5\016\uffb5\021\uffb5\025\uffb5\030" +
    "\uffb5\035\uffb5\046\uffb5\001\002\000\004\043\276\001\002" +
    "\000\016\005\020\006\017\007\014\010\016\011\012\044" +
    "\uffc2\001\002\000\004\035\311\001\002\000\004\044\304" +
    "\001\002\000\006\044\uffc4\051\302\001\002\000\016\005" +
    "\020\006\017\007\014\010\016\011\012\044\uffc2\001\002" +
    "\000\004\044\uffc3\001\002\000\004\045\305\001\002\000" +
    "\024\004\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\025\uffbe" +
    "\030\uffbe\035\uffbe\046\uffbe\001\002\000\024\004\045\014" +
    "\027\015\053\016\035\021\036\025\033\030\052\035\041" +
    "\046\307\001\002\000\004\042\310\001\002\000\016\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\001\002" +
    "\000\010\044\uffc1\047\165\051\uffc1\001\002\000\006\044" +
    "\uffc0\051\uffc0\001\002\000\004\012\uffc7\001\002\000\004" +
    "\035\315\001\002\000\010\042\323\047\165\064\215\001" +
    "\002\000\006\042\320\064\215\001\002\000\004\042\321" +
    "\001\002\000\020\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\001\002\000\020\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\001\002\000" +
    "\004\042\324\001\002\000\020\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\001\002\000\020\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\010\002\003\003\005\004\006\001\001\000" +
    "\002\001\001\000\004\012\313\001\001\000\010\005\014" +
    "\006\010\012\012\001\001\000\006\003\007\004\006\001" +
    "\001\000\002\001\001\000\010\005\312\006\010\012\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\024\001\001\000\034" +
    "\013\046\033\030\034\041\035\042\036\047\037\027\040" +
    "\036\042\037\043\031\045\025\046\033\052\045\053\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\013\113\015\254\016\103\017" +
    "\111\020\071\021\116\022\077\023\112\024\115\025\100" +
    "\027\075\030\104\031\105\040\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\222\001\001\000\002\001\001\000\004" +
    "\014\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\046\037\063\001\001\000\002\001\001\000\004" +
    "\044\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\013\113\015\206" +
    "\016\103\017\111\020\071\021\116\022\077\023\112\024" +
    "\115\025\100\027\075\030\104\031\105\040\074\001\001" +
    "\000\036\013\113\015\072\016\103\017\111\020\071\021" +
    "\116\022\077\023\112\024\115\025\100\027\075\030\104" +
    "\031\105\040\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\013\113\015\175\016\103\017\111" +
    "\020\071\021\116\022\077\023\112\024\115\025\100\027" +
    "\075\030\104\031\105\040\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\113\023\145\024\115\025\100\027" +
    "\075\030\104\031\105\040\074\001\001\000\026\013\113" +
    "\021\144\022\077\023\112\024\115\025\100\027\075\030" +
    "\104\031\105\040\074\001\001\000\022\013\113\023\143" +
    "\024\115\025\100\027\075\030\104\031\105\040\074\001" +
    "\001\000\022\013\113\023\126\024\115\025\100\027\075" +
    "\030\104\031\105\040\074\001\001\000\026\013\113\021" +
    "\125\022\077\023\112\024\115\025\100\027\075\030\104" +
    "\031\105\040\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\113\024\142\025\100\027\075\030\104" +
    "\031\105\040\074\001\001\000\020\013\113\024\131\025" +
    "\100\027\075\030\104\031\105\040\074\001\001\000\002" +
    "\001\001\000\016\013\113\025\141\027\075\030\104\031" +
    "\105\040\074\001\001\000\016\013\113\025\140\027\075" +
    "\030\104\031\105\040\074\001\001\000\016\013\113\025" +
    "\137\027\075\030\104\031\105\040\074\001\001\000\016" +
    "\013\113\025\136\027\075\030\104\031\105\040\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\113\023\147" +
    "\024\115\025\100\027\075\030\104\031\105\040\074\001" +
    "\001\000\002\001\001\000\030\013\113\020\151\021\116" +
    "\022\077\023\112\024\115\025\100\027\075\030\104\031" +
    "\105\040\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\113\030" +
    "\156\031\105\040\074\001\001\000\002\001\001\000\032" +
    "\013\113\017\160\020\071\021\116\022\077\023\112\024" +
    "\115\025\100\027\075\030\104\031\105\040\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\113\031\171\040\074\041\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\113" +
    "\031\171\040\074\041\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\013\046\033\202\034" +
    "\041\035\042\036\047\037\027\040\036\042\037\043\031" +
    "\045\025\046\033\052\045\053\043\054\203\001\001\000" +
    "\002\001\001\000\034\013\046\033\204\034\041\035\042" +
    "\036\047\037\027\040\036\042\037\043\031\045\025\046" +
    "\033\052\045\053\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\013" +
    "\046\033\202\034\041\035\042\036\047\037\027\040\036" +
    "\042\037\043\031\045\025\046\033\052\045\053\043\054" +
    "\211\001\001\000\034\013\046\033\204\034\041\035\042" +
    "\036\047\037\027\040\036\042\037\043\031\045\025\046" +
    "\033\052\045\053\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\013\113\015\215\016\103\017\111\020" +
    "\071\021\116\022\077\023\112\024\115\025\100\027\075" +
    "\030\104\031\105\040\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\224\037\225\001\001\000\004\014" +
    "\213\001\001\000\004\014\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\231\050" +
    "\233\001\001\000\004\051\243\001\001\000\036\013\113" +
    "\015\235\016\103\017\111\020\071\021\116\022\077\023" +
    "\112\024\115\025\100\027\075\030\104\031\105\040\074" +
    "\001\001\000\006\047\234\050\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\046\033\202\034\041\035\042\036\047\037" +
    "\027\040\036\042\037\043\031\045\025\046\033\052\045" +
    "\053\043\054\241\001\001\000\034\013\046\033\204\034" +
    "\041\035\042\036\047\037\027\040\036\042\037\043\031" +
    "\045\025\046\033\052\045\053\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\046\033\202\034\041\035\042\036\047\037" +
    "\027\040\036\042\037\043\031\045\025\046\033\052\045" +
    "\053\043\054\247\001\001\000\034\013\046\033\204\034" +
    "\041\035\042\036\047\037\027\040\036\042\037\043\031" +
    "\045\025\046\033\052\045\053\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\013\046\033" +
    "\202\034\041\035\042\036\047\037\027\040\036\042\037" +
    "\043\031\045\025\046\033\052\045\053\043\054\257\001" +
    "\001\000\034\013\046\033\204\034\041\035\042\036\047" +
    "\037\027\040\036\042\037\043\031\045\025\046\033\052" +
    "\045\053\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\113\015\263\016\103\017\111\020\071\021" +
    "\116\022\077\023\112\024\115\025\100\027\075\030\104" +
    "\031\105\040\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\277\010\300" +
    "\012\276\001\001\000\004\013\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\302\010\300\012\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\305\001\001\000\034\013\046\033\030\034\041\035\042" +
    "\036\047\037\027\040\036\042\037\043\031\045\025\046" +
    "\033\052\045\053\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\315\001\001\000\004\014\321\001\001" +
    "\000\004\014\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= global_vars functions main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // global_vars ::= global_var global_vars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_vars",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_vars ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_vars",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_var ::= LET type_nt ID DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global_var ::= LET type_nt array_decl DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_var ::= LET type_nt ID init_nt DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_var ::= LET type_nt array_decl init_nt DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main ::= VOID PRINCIPAL LBLOCK code_block RBLOCK DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_nt ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_nt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_nt ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_nt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_nt ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_nt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_nt ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_nt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_nt ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_nt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array_decl ::= ID LBRACKET INT_LIT RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // init_nt ::= ASSIGN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_nt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= or_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // or_expr ::= or_expr OR and_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // or_expr ::= and_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // and_expr ::= and_expr AND lp_rel_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // and_expr ::= lp_rel_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lp_rel_expr ::= hp_rel_expr EQ hp_rel_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lp_rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lp_rel_expr ::= hp_rel_expr NEQ hp_rel_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lp_rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lp_rel_expr ::= hp_rel_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lp_rel_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // hp_rel_expr ::= adit_expr GT adit_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // hp_rel_expr ::= hp_rel_expr GE adit_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // hp_rel_expr ::= hp_rel_expr LT adit_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // hp_rel_expr ::= hp_rel_expr LE adit_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // hp_rel_expr ::= adit_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // hp_rel_expr ::= logic_neg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // hp_rel_expr ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // hp_rel_expr ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // hp_rel_expr ::= CHAR_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // hp_rel_expr ::= STRING_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hp_rel_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logic_neg ::= SIGMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_neg",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // adit_expr ::= adit_expr PLUS mult_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adit_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // adit_expr ::= adit_expr MINUS mult_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adit_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // adit_expr ::= mult_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adit_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mult_expr ::= mult_expr MULT unary_minus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mult_expr ::= mult_expr DIV unary_minus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mult_expr ::= mult_expr DIVINT unary_minus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mult_expr ::= mult_expr MOD unary_minus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mult_expr ::= unary_minus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unary_minus ::= MINUS literal_numbers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_minus",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unary_minus ::= power_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_minus",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal_numbers ::= INT_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numbers",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal_numbers ::= FLOAT_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numbers",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // power_expr ::= inc_dec_expr POW inc_dec_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("power_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // power_expr ::= inc_dec_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("power_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inc_dec_expr ::= ID INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inc_dec_expr ::= ID DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inc_dec_expr ::= arithm_atom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithm_atom ::= INT_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithm_atom",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arithm_atom ::= FLOAT_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithm_atom",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithm_atom ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithm_atom",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arithm_atom ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithm_atom",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithm_atom ::= array_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithm_atom",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arithm_atom ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithm_atom",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // functions ::= function functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function ::= type_nt ID LPAREN params RPAREN LBLOCK code_block RBLOCK DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // params ::= param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // params ::= param COMMA params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // param ::= type_nt ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // param ::= type_nt array_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // code_block ::= code_block statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // code_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= control_structure 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentence ::= var_creation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentence ::= var_assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentence ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentence ::= inputfn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentence ::= outputfn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentence ::= code_block_return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inputfn ::= INPUT LPAREN ID RPAREN DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inputfn",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // outputfn ::= OUTPUT LPAREN output_value RPAREN DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("outputfn",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // output_value ::= INT_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_value",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // output_value ::= FLOAT_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_value",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // output_value ::= STRING_LIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_value",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var_creation ::= LET type_nt ID DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_creation",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_creation ::= LET type_nt array_decl DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_creation",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_creation ::= LET type_nt var_assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_creation",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var_assignment ::= ID init_nt DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // var_assignment ::= array_decl init_nt DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_call ::= ID LPAREN literal_params RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal_params ::= arithm_atom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_params",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal_params ::= arithm_atom COMMA literal_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_params",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // control_structure ::= decide 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // control_structure ::= loop_nt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // control_structure ::= for_nt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // decide ::= DECIDE OF decide_options decide_else END DECIDE DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // decide_options ::= decide_option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_options",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // decide_options ::= decide_option decide_options 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_options",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // decide_option ::= LPAREN expr RPAREN ARROW LBLOCK cs_code_block RBLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_option",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // decide_else ::= ELSE ARROW LBLOCK cs_code_block RBLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_else",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // decide_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_else",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // loop_nt ::= LOOP LBLOCK cs_code_block RBLOCK EXIT WHEN expr DOLLAR END LOOP DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_nt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_nt ::= FOR var_assignment STEP INT_LIT TO expr DO LBLOCK cs_code_block RBLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_nt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_nt ::= FOR var_assignment STEP INT_LIT DOWNTO expr DO LBLOCK cs_code_block RBLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_nt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cs_code_block ::= cs_code_block statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs_code_block",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cs_code_block ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs_code_block",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // code_block_return ::= RETURN expr DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_block_return",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
